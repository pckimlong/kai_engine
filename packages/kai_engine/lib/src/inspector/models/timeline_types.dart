import 'package:freezed_annotation/freezed_annotation.dart';

import '../../models/core_message.dart';

part 'timeline_types.freezed.dart';
part 'timeline_types.g.dart';

/// Common types and enums used across the inspector timeline models.

/// The status of a timeline, phase, or step.
enum TimelineStatus { running, completed, failed }

/// Severity levels for timeline logs.
enum TimelineLogSeverity { debug, info, warning, error }

/// Role: A single log entry with a message and severity level.
///
/// Flow: These are attached to `TimelinePhase`s or `TimelineStep`s to provide
/// contextual, printf-style information.
@freezed
sealed class TimelineLog with _$TimelineLog {
  /// Creates a new TimelineLog.
  const factory TimelineLog({
    /// The log message.
    required String message,

    /// When this log was created.
    required DateTime timestamp,

    /// Severity level of the log.
    @Default(TimelineLogSeverity.info) TimelineLogSeverity severity,

    /// Additional metadata about the log.
    @Default({}) Map<String, dynamic> metadata,
  }) = _TimelineLog;

  /// Creates a TimelineLog from JSON.
  factory TimelineLog.fromJson(Map<String, dynamic> json) =>
      _$TimelineLogFromJson(json);
}

/// Specialized log for storing prompt messages sent to AI generation
@freezed
sealed class PromptMessagesLog with _$PromptMessagesLog {
  /// Creates a new PromptMessagesLog.
  const factory PromptMessagesLog({
    /// The log message.
    required String message,

    /// When this log was created.
    required DateTime timestamp,

    /// The actual CoreMessage objects sent as prompts.
    required List<CoreMessage> promptMessages,

    /// Severity level of the log.
    @Default(TimelineLogSeverity.info) TimelineLogSeverity severity,

    /// Additional metadata about the log (for auxiliary data only).
    @Default({}) Map<String, dynamic> metadata,
  }) = _PromptMessagesLog;

  /// Creates a PromptMessagesLog from JSON.
  factory PromptMessagesLog.fromJson(Map<String, dynamic> json) =>
      _$PromptMessagesLogFromJson(json);
}

/// Specialized log for storing messages generated by AI
@freezed
sealed class GeneratedMessagesLog with _$GeneratedMessagesLog {
  /// Creates a new GeneratedMessagesLog.
  const factory GeneratedMessagesLog({
    /// The log message.
    required String message,

    /// When this log was created.
    required DateTime timestamp,

    /// The actual CoreMessage objects generated by AI.
    required List<CoreMessage> generatedMessages,

    /// Severity level of the log.
    @Default(TimelineLogSeverity.info) TimelineLogSeverity severity,

    /// Additional metadata about the log (for auxiliary data only).
    @Default({}) Map<String, dynamic> metadata,
  }) = _GeneratedMessagesLog;

  /// Creates a GeneratedMessagesLog from JSON.
  factory GeneratedMessagesLog.fromJson(Map<String, dynamic> json) =>
      _$GeneratedMessagesLogFromJson(json);
}
